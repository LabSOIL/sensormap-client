# coding: utf-8

"""
    soil-api

    API for managing SOIL lab data

    The version of the OpenAPI document: 2.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sensormap_client.models.sensor_data import SensorData
from typing import Optional, Set
from typing_extensions import Self

class SensorUpdate(BaseModel):
    """
    SensorUpdate
    """ # noqa: E501
    comment: Optional[StrictStr] = None
    data: Optional[List[SensorData]] = None
    data_base64: Optional[StrictStr] = None
    data_from: Optional[datetime] = None
    data_to: Optional[datetime] = None
    description: Optional[StrictStr] = None
    manufacturer: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    serial_number: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["comment", "data", "data_base64", "data_from", "data_to", "description", "manufacturer", "name", "serial_number"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SensorUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item_data in self.data:
                if _item_data:
                    _items.append(_item_data.to_dict())
            _dict['data'] = _items
        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if data_base64 (nullable) is None
        # and model_fields_set contains the field
        if self.data_base64 is None and "data_base64" in self.model_fields_set:
            _dict['data_base64'] = None

        # set to None if data_from (nullable) is None
        # and model_fields_set contains the field
        if self.data_from is None and "data_from" in self.model_fields_set:
            _dict['data_from'] = None

        # set to None if data_to (nullable) is None
        # and model_fields_set contains the field
        if self.data_to is None and "data_to" in self.model_fields_set:
            _dict['data_to'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if manufacturer (nullable) is None
        # and model_fields_set contains the field
        if self.manufacturer is None and "manufacturer" in self.model_fields_set:
            _dict['manufacturer'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if serial_number (nullable) is None
        # and model_fields_set contains the field
        if self.serial_number is None and "serial_number" in self.model_fields_set:
            _dict['serial_number'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SensorUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comment": obj.get("comment"),
            "data": [SensorData.from_dict(_item) for _item in obj["data"]] if obj.get("data") is not None else None,
            "data_base64": obj.get("data_base64"),
            "data_from": obj.get("data_from"),
            "data_to": obj.get("data_to"),
            "description": obj.get("description"),
            "manufacturer": obj.get("manufacturer"),
            "name": obj.get("name"),
            "serial_number": obj.get("serial_number")
        })
        return _obj


