# coding: utf-8

"""
    soil-api

    API for managing SOIL lab data

    The version of the OpenAPI document: 2.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from sensormap_client.models.closest_sensor_profile import ClosestSensorProfile
from sensormap_client.models.gradientchoices import Gradientchoices
from typing import Optional, Set
from typing_extensions import Self

class Plot(BaseModel):
    """
    Plot
    """ # noqa: E501
    area: Optional[Area] = None
    area_id: StrictStr
    aspect: Optional[StrictStr] = None
    coord_srid: StrictInt
    coord_x: Union[StrictFloat, StrictInt]
    coord_y: Union[StrictFloat, StrictInt]
    coord_z: Union[StrictFloat, StrictInt]
    created_on: Optional[date] = None
    gradient: Optional[Gradientchoices] = None
    id: StrictStr
    image: Optional[StrictStr] = None
    last_updated: datetime
    lithology: Optional[StrictStr] = None
    name: StrictStr
    nearest_sensor_profiles: List[ClosestSensorProfile]
    samples: List[PlotSample]
    topography: Optional[StrictStr] = None
    transects: List[Transect]
    vegetation_type: Optional[StrictStr] = None
    weather: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["area", "area_id", "aspect", "coord_srid", "coord_x", "coord_y", "coord_z", "created_on", "gradient", "id", "image", "last_updated", "lithology", "name", "nearest_sensor_profiles", "samples", "topography", "transects", "vegetation_type", "weather"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Plot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of area
        if self.area:
            _dict['area'] = self.area.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in nearest_sensor_profiles (list)
        _items = []
        if self.nearest_sensor_profiles:
            for _item_nearest_sensor_profiles in self.nearest_sensor_profiles:
                if _item_nearest_sensor_profiles:
                    _items.append(_item_nearest_sensor_profiles.to_dict())
            _dict['nearest_sensor_profiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in samples (list)
        _items = []
        if self.samples:
            for _item_samples in self.samples:
                if _item_samples:
                    _items.append(_item_samples.to_dict())
            _dict['samples'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transects (list)
        _items = []
        if self.transects:
            for _item_transects in self.transects:
                if _item_transects:
                    _items.append(_item_transects.to_dict())
            _dict['transects'] = _items
        # set to None if area (nullable) is None
        # and model_fields_set contains the field
        if self.area is None and "area" in self.model_fields_set:
            _dict['area'] = None

        # set to None if aspect (nullable) is None
        # and model_fields_set contains the field
        if self.aspect is None and "aspect" in self.model_fields_set:
            _dict['aspect'] = None

        # set to None if created_on (nullable) is None
        # and model_fields_set contains the field
        if self.created_on is None and "created_on" in self.model_fields_set:
            _dict['created_on'] = None

        # set to None if gradient (nullable) is None
        # and model_fields_set contains the field
        if self.gradient is None and "gradient" in self.model_fields_set:
            _dict['gradient'] = None

        # set to None if image (nullable) is None
        # and model_fields_set contains the field
        if self.image is None and "image" in self.model_fields_set:
            _dict['image'] = None

        # set to None if lithology (nullable) is None
        # and model_fields_set contains the field
        if self.lithology is None and "lithology" in self.model_fields_set:
            _dict['lithology'] = None

        # set to None if topography (nullable) is None
        # and model_fields_set contains the field
        if self.topography is None and "topography" in self.model_fields_set:
            _dict['topography'] = None

        # set to None if vegetation_type (nullable) is None
        # and model_fields_set contains the field
        if self.vegetation_type is None and "vegetation_type" in self.model_fields_set:
            _dict['vegetation_type'] = None

        # set to None if weather (nullable) is None
        # and model_fields_set contains the field
        if self.weather is None and "weather" in self.model_fields_set:
            _dict['weather'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Plot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "area": Area.from_dict(obj["area"]) if obj.get("area") is not None else None,
            "area_id": obj.get("area_id"),
            "aspect": obj.get("aspect"),
            "coord_srid": obj.get("coord_srid"),
            "coord_x": obj.get("coord_x"),
            "coord_y": obj.get("coord_y"),
            "coord_z": obj.get("coord_z"),
            "created_on": obj.get("created_on"),
            "gradient": obj.get("gradient"),
            "id": obj.get("id"),
            "image": obj.get("image"),
            "last_updated": obj.get("last_updated"),
            "lithology": obj.get("lithology"),
            "name": obj.get("name"),
            "nearest_sensor_profiles": [ClosestSensorProfile.from_dict(_item) for _item in obj["nearest_sensor_profiles"]] if obj.get("nearest_sensor_profiles") is not None else None,
            "samples": [PlotSample.from_dict(_item) for _item in obj["samples"]] if obj.get("samples") is not None else None,
            "topography": obj.get("topography"),
            "transects": [Transect.from_dict(_item) for _item in obj["transects"]] if obj.get("transects") is not None else None,
            "vegetation_type": obj.get("vegetation_type"),
            "weather": obj.get("weather")
        })
        return _obj

from sensormap_client.models.area import Area
from sensormap_client.models.plot_sample import PlotSample
from sensormap_client.models.transect import Transect
# TODO: Rewrite to not use raise_errors
Plot.model_rebuild(raise_errors=False)

