# coding: utf-8

"""
    soil-api

    API for managing SOIL lab data

    The version of the OpenAPI document: 2.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sensormap_client.models.sensor_data import SensorData
from typing import Optional, Set
from typing_extensions import Self

class SensorProfileAssignment(BaseModel):
    """
    SensorProfileAssignment
    """ # noqa: E501
    data: Optional[List[SensorData]] = None
    date_from: datetime
    date_to: datetime
    id: StrictStr
    last_updated: datetime
    sensor: Optional[Sensor] = None
    sensor_id: StrictStr
    sensor_profile: Optional[SensorProfile] = None
    sensorprofile_id: StrictStr
    __properties: ClassVar[List[str]] = ["data", "date_from", "date_to", "id", "last_updated", "sensor", "sensor_id", "sensor_profile", "sensorprofile_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SensorProfileAssignment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item_data in self.data:
                if _item_data:
                    _items.append(_item_data.to_dict())
            _dict['data'] = _items
        # override the default output from pydantic by calling `to_dict()` of sensor
        if self.sensor:
            _dict['sensor'] = self.sensor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sensor_profile
        if self.sensor_profile:
            _dict['sensor_profile'] = self.sensor_profile.to_dict()
        # set to None if sensor (nullable) is None
        # and model_fields_set contains the field
        if self.sensor is None and "sensor" in self.model_fields_set:
            _dict['sensor'] = None

        # set to None if sensor_profile (nullable) is None
        # and model_fields_set contains the field
        if self.sensor_profile is None and "sensor_profile" in self.model_fields_set:
            _dict['sensor_profile'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SensorProfileAssignment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "data": [SensorData.from_dict(_item) for _item in obj["data"]] if obj.get("data") is not None else None,
            "date_from": obj.get("date_from"),
            "date_to": obj.get("date_to"),
            "id": obj.get("id"),
            "last_updated": obj.get("last_updated"),
            "sensor": Sensor.from_dict(obj["sensor"]) if obj.get("sensor") is not None else None,
            "sensor_id": obj.get("sensor_id"),
            "sensor_profile": SensorProfile.from_dict(obj["sensor_profile"]) if obj.get("sensor_profile") is not None else None,
            "sensorprofile_id": obj.get("sensorprofile_id")
        })
        return _obj

from sensormap_client.models.sensor import Sensor
from sensormap_client.models.sensor_profile import SensorProfile
# TODO: Rewrite to not use raise_errors
SensorProfileAssignment.model_rebuild(raise_errors=False)

