# coding: utf-8

"""
    soil-api

    API for managing SOIL lab data

    The version of the OpenAPI document: 2.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GnssCreate(BaseModel):
    """
    GnssCreate
    """ # noqa: E501
    comment: Optional[StrictStr] = None
    coord_x: Optional[Union[StrictFloat, StrictInt]] = None
    coord_y: Optional[Union[StrictFloat, StrictInt]] = None
    data_base64: Optional[StrictStr] = None
    elevation_gps: Optional[Union[StrictFloat, StrictInt]] = None
    filename: Optional[StrictStr] = None
    latitude: Optional[Union[StrictFloat, StrictInt]] = None
    longitude: Optional[Union[StrictFloat, StrictInt]] = None
    name: Optional[StrictStr] = None
    original_filename: Optional[StrictStr] = None
    time: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["comment", "coord_x", "coord_y", "data_base64", "elevation_gps", "filename", "latitude", "longitude", "name", "original_filename", "time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GnssCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if coord_x (nullable) is None
        # and model_fields_set contains the field
        if self.coord_x is None and "coord_x" in self.model_fields_set:
            _dict['coord_x'] = None

        # set to None if coord_y (nullable) is None
        # and model_fields_set contains the field
        if self.coord_y is None and "coord_y" in self.model_fields_set:
            _dict['coord_y'] = None

        # set to None if data_base64 (nullable) is None
        # and model_fields_set contains the field
        if self.data_base64 is None and "data_base64" in self.model_fields_set:
            _dict['data_base64'] = None

        # set to None if elevation_gps (nullable) is None
        # and model_fields_set contains the field
        if self.elevation_gps is None and "elevation_gps" in self.model_fields_set:
            _dict['elevation_gps'] = None

        # set to None if filename (nullable) is None
        # and model_fields_set contains the field
        if self.filename is None and "filename" in self.model_fields_set:
            _dict['filename'] = None

        # set to None if latitude (nullable) is None
        # and model_fields_set contains the field
        if self.latitude is None and "latitude" in self.model_fields_set:
            _dict['latitude'] = None

        # set to None if longitude (nullable) is None
        # and model_fields_set contains the field
        if self.longitude is None and "longitude" in self.model_fields_set:
            _dict['longitude'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if original_filename (nullable) is None
        # and model_fields_set contains the field
        if self.original_filename is None and "original_filename" in self.model_fields_set:
            _dict['original_filename'] = None

        # set to None if time (nullable) is None
        # and model_fields_set contains the field
        if self.time is None and "time" in self.model_fields_set:
            _dict['time'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GnssCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comment": obj.get("comment"),
            "coord_x": obj.get("coord_x"),
            "coord_y": obj.get("coord_y"),
            "data_base64": obj.get("data_base64"),
            "elevation_gps": obj.get("elevation_gps"),
            "filename": obj.get("filename"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "name": obj.get("name"),
            "original_filename": obj.get("original_filename"),
            "time": obj.get("time")
        })
        return _obj


