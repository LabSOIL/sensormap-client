# coding: utf-8

"""
    soil-api

    API for managing SOIL lab data

    The version of the OpenAPI document: 2.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SoilProfileUpdate(BaseModel):
    """
    SoilProfileUpdate
    """ # noqa: E501
    area_id: Optional[StrictStr] = None
    aspect: Optional[StrictStr] = None
    coord_x: Optional[Union[StrictFloat, StrictInt]] = None
    coord_y: Optional[Union[StrictFloat, StrictInt]] = None
    coord_z: Optional[Union[StrictFloat, StrictInt]] = None
    description_horizon: Optional[Any] = None
    gradient: Optional[StrictStr] = None
    lythology_surficial_deposit: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    parent_material: Optional[Union[StrictFloat, StrictInt]] = None
    photo: Optional[StrictStr] = None
    soil_diagram: Optional[StrictStr] = None
    soil_type_id: Optional[StrictStr] = None
    topography: Optional[StrictStr] = None
    vegetation_type: Optional[StrictStr] = None
    weather: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["area_id", "aspect", "coord_x", "coord_y", "coord_z", "description_horizon", "gradient", "lythology_surficial_deposit", "name", "parent_material", "photo", "soil_diagram", "soil_type_id", "topography", "vegetation_type", "weather"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SoilProfileUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if area_id (nullable) is None
        # and model_fields_set contains the field
        if self.area_id is None and "area_id" in self.model_fields_set:
            _dict['area_id'] = None

        # set to None if aspect (nullable) is None
        # and model_fields_set contains the field
        if self.aspect is None and "aspect" in self.model_fields_set:
            _dict['aspect'] = None

        # set to None if coord_x (nullable) is None
        # and model_fields_set contains the field
        if self.coord_x is None and "coord_x" in self.model_fields_set:
            _dict['coord_x'] = None

        # set to None if coord_y (nullable) is None
        # and model_fields_set contains the field
        if self.coord_y is None and "coord_y" in self.model_fields_set:
            _dict['coord_y'] = None

        # set to None if coord_z (nullable) is None
        # and model_fields_set contains the field
        if self.coord_z is None and "coord_z" in self.model_fields_set:
            _dict['coord_z'] = None

        # set to None if description_horizon (nullable) is None
        # and model_fields_set contains the field
        if self.description_horizon is None and "description_horizon" in self.model_fields_set:
            _dict['description_horizon'] = None

        # set to None if gradient (nullable) is None
        # and model_fields_set contains the field
        if self.gradient is None and "gradient" in self.model_fields_set:
            _dict['gradient'] = None

        # set to None if lythology_surficial_deposit (nullable) is None
        # and model_fields_set contains the field
        if self.lythology_surficial_deposit is None and "lythology_surficial_deposit" in self.model_fields_set:
            _dict['lythology_surficial_deposit'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if parent_material (nullable) is None
        # and model_fields_set contains the field
        if self.parent_material is None and "parent_material" in self.model_fields_set:
            _dict['parent_material'] = None

        # set to None if photo (nullable) is None
        # and model_fields_set contains the field
        if self.photo is None and "photo" in self.model_fields_set:
            _dict['photo'] = None

        # set to None if soil_diagram (nullable) is None
        # and model_fields_set contains the field
        if self.soil_diagram is None and "soil_diagram" in self.model_fields_set:
            _dict['soil_diagram'] = None

        # set to None if soil_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.soil_type_id is None and "soil_type_id" in self.model_fields_set:
            _dict['soil_type_id'] = None

        # set to None if topography (nullable) is None
        # and model_fields_set contains the field
        if self.topography is None and "topography" in self.model_fields_set:
            _dict['topography'] = None

        # set to None if vegetation_type (nullable) is None
        # and model_fields_set contains the field
        if self.vegetation_type is None and "vegetation_type" in self.model_fields_set:
            _dict['vegetation_type'] = None

        # set to None if weather (nullable) is None
        # and model_fields_set contains the field
        if self.weather is None and "weather" in self.model_fields_set:
            _dict['weather'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SoilProfileUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "area_id": obj.get("area_id"),
            "aspect": obj.get("aspect"),
            "coord_x": obj.get("coord_x"),
            "coord_y": obj.get("coord_y"),
            "coord_z": obj.get("coord_z"),
            "description_horizon": obj.get("description_horizon"),
            "gradient": obj.get("gradient"),
            "lythology_surficial_deposit": obj.get("lythology_surficial_deposit"),
            "name": obj.get("name"),
            "parent_material": obj.get("parent_material"),
            "photo": obj.get("photo"),
            "soil_diagram": obj.get("soil_diagram"),
            "soil_type_id": obj.get("soil_type_id"),
            "topography": obj.get("topography"),
            "vegetation_type": obj.get("vegetation_type"),
            "weather": obj.get("weather")
        })
        return _obj


