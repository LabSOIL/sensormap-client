# coding: utf-8

"""
    soil-api

    API for managing SOIL lab data

    The version of the OpenAPI document: 2.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Transect(BaseModel):
    """
    Transect
    """ # noqa: E501
    area: Optional[Area] = None
    area_id: StrictStr
    date_created: Optional[datetime] = None
    description: Optional[StrictStr] = None
    id: StrictStr
    last_updated: datetime
    name: StrictStr
    nodes: List[TransectNode]
    __properties: ClassVar[List[str]] = ["area", "area_id", "date_created", "description", "id", "last_updated", "name", "nodes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transect from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of area
        if self.area:
            _dict['area'] = self.area.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in nodes (list)
        _items = []
        if self.nodes:
            for _item_nodes in self.nodes:
                if _item_nodes:
                    _items.append(_item_nodes.to_dict())
            _dict['nodes'] = _items
        # set to None if area (nullable) is None
        # and model_fields_set contains the field
        if self.area is None and "area" in self.model_fields_set:
            _dict['area'] = None

        # set to None if date_created (nullable) is None
        # and model_fields_set contains the field
        if self.date_created is None and "date_created" in self.model_fields_set:
            _dict['date_created'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transect from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "area": Area.from_dict(obj["area"]) if obj.get("area") is not None else None,
            "area_id": obj.get("area_id"),
            "date_created": obj.get("date_created"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "last_updated": obj.get("last_updated"),
            "name": obj.get("name"),
            "nodes": [TransectNode.from_dict(_item) for _item in obj["nodes"]] if obj.get("nodes") is not None else None
        })
        return _obj

from sensormap_client.models.area import Area
from sensormap_client.models.transect_node import TransectNode
# TODO: Rewrite to not use raise_errors
Transect.model_rebuild(raise_errors=False)

