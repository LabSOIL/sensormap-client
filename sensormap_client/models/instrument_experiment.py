# coding: utf-8

"""
    soil-api

    API for managing SOIL lab data

    The version of the OpenAPI document: 2.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from sensormap_client.models.instrument_experiment_channel import InstrumentExperimentChannel
from typing import Optional, Set
from typing_extensions import Self

class InstrumentExperiment(BaseModel):
    """
    InstrumentExperiment
    """ # noqa: E501
    channels: List[InstrumentExperimentChannel]
    data_source: Optional[StrictStr] = None
    var_date: Optional[datetime] = Field(default=None, alias="date")
    description: Optional[StrictStr] = None
    device_filename: Optional[StrictStr] = None
    filename: Optional[StrictStr] = None
    id: StrictStr
    init_e: Optional[Union[StrictFloat, StrictInt]] = None
    instrument_model: Optional[StrictStr] = None
    last_updated: datetime
    name: Optional[StrictStr] = None
    project_id: Optional[StrictStr] = None
    quiet_time: Optional[Union[StrictFloat, StrictInt]] = None
    run_time: Optional[Union[StrictFloat, StrictInt]] = None
    sample_interval: Optional[Union[StrictFloat, StrictInt]] = None
    samples: Optional[StrictInt] = None
    sensitivity: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["channels", "data_source", "date", "description", "device_filename", "filename", "id", "init_e", "instrument_model", "last_updated", "name", "project_id", "quiet_time", "run_time", "sample_interval", "samples", "sensitivity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InstrumentExperiment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in channels (list)
        _items = []
        if self.channels:
            for _item_channels in self.channels:
                if _item_channels:
                    _items.append(_item_channels.to_dict())
            _dict['channels'] = _items
        # set to None if data_source (nullable) is None
        # and model_fields_set contains the field
        if self.data_source is None and "data_source" in self.model_fields_set:
            _dict['data_source'] = None

        # set to None if var_date (nullable) is None
        # and model_fields_set contains the field
        if self.var_date is None and "var_date" in self.model_fields_set:
            _dict['date'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if device_filename (nullable) is None
        # and model_fields_set contains the field
        if self.device_filename is None and "device_filename" in self.model_fields_set:
            _dict['device_filename'] = None

        # set to None if filename (nullable) is None
        # and model_fields_set contains the field
        if self.filename is None and "filename" in self.model_fields_set:
            _dict['filename'] = None

        # set to None if init_e (nullable) is None
        # and model_fields_set contains the field
        if self.init_e is None and "init_e" in self.model_fields_set:
            _dict['init_e'] = None

        # set to None if instrument_model (nullable) is None
        # and model_fields_set contains the field
        if self.instrument_model is None and "instrument_model" in self.model_fields_set:
            _dict['instrument_model'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['project_id'] = None

        # set to None if quiet_time (nullable) is None
        # and model_fields_set contains the field
        if self.quiet_time is None and "quiet_time" in self.model_fields_set:
            _dict['quiet_time'] = None

        # set to None if run_time (nullable) is None
        # and model_fields_set contains the field
        if self.run_time is None and "run_time" in self.model_fields_set:
            _dict['run_time'] = None

        # set to None if sample_interval (nullable) is None
        # and model_fields_set contains the field
        if self.sample_interval is None and "sample_interval" in self.model_fields_set:
            _dict['sample_interval'] = None

        # set to None if samples (nullable) is None
        # and model_fields_set contains the field
        if self.samples is None and "samples" in self.model_fields_set:
            _dict['samples'] = None

        # set to None if sensitivity (nullable) is None
        # and model_fields_set contains the field
        if self.sensitivity is None and "sensitivity" in self.model_fields_set:
            _dict['sensitivity'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InstrumentExperiment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channels": [InstrumentExperimentChannel.from_dict(_item) for _item in obj["channels"]] if obj.get("channels") is not None else None,
            "data_source": obj.get("data_source"),
            "date": obj.get("date"),
            "description": obj.get("description"),
            "device_filename": obj.get("device_filename"),
            "filename": obj.get("filename"),
            "id": obj.get("id"),
            "init_e": obj.get("init_e"),
            "instrument_model": obj.get("instrument_model"),
            "last_updated": obj.get("last_updated"),
            "name": obj.get("name"),
            "project_id": obj.get("project_id"),
            "quiet_time": obj.get("quiet_time"),
            "run_time": obj.get("run_time"),
            "sample_interval": obj.get("sample_interval"),
            "samples": obj.get("samples"),
            "sensitivity": obj.get("sensitivity")
        })
        return _obj


