# coding: utf-8

"""
    soil-api

    API for managing SOIL lab data

    The version of the OpenAPI document: 2.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InstrumentExperimentChannel(BaseModel):
    """
    The API model for an instrument experiment channel.
    """ # noqa: E501
    baseline_chosen_points: Optional[Any] = None
    baseline_spline: Optional[Any] = None
    baseline_values: Optional[Any] = None
    channel_name: StrictStr
    experiment_id: StrictStr
    id: StrictStr
    integral_chosen_pairs: Optional[Any] = None
    integral_results: Optional[Any] = None
    raw_values: Optional[Any] = None
    time_values: Optional[Any] = None
    __properties: ClassVar[List[str]] = ["baseline_chosen_points", "baseline_spline", "baseline_values", "channel_name", "experiment_id", "id", "integral_chosen_pairs", "integral_results", "raw_values", "time_values"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InstrumentExperimentChannel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of baseline_chosen_points
        if self.baseline_chosen_points:
            _dict['baseline_chosen_points'] = self.baseline_chosen_points.to_dict()
        # override the default output from pydantic by calling `to_dict()` of baseline_spline
        if self.baseline_spline:
            _dict['baseline_spline'] = self.baseline_spline.to_dict()
        # override the default output from pydantic by calling `to_dict()` of baseline_values
        if self.baseline_values:
            _dict['baseline_values'] = self.baseline_values.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integral_chosen_pairs
        if self.integral_chosen_pairs:
            _dict['integral_chosen_pairs'] = self.integral_chosen_pairs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integral_results
        if self.integral_results:
            _dict['integral_results'] = self.integral_results.to_dict()
        # override the default output from pydantic by calling `to_dict()` of raw_values
        if self.raw_values:
            _dict['raw_values'] = self.raw_values.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_values
        if self.time_values:
            _dict['time_values'] = self.time_values.to_dict()
        # set to None if baseline_chosen_points (nullable) is None
        # and model_fields_set contains the field
        if self.baseline_chosen_points is None and "baseline_chosen_points" in self.model_fields_set:
            _dict['baseline_chosen_points'] = None

        # set to None if baseline_spline (nullable) is None
        # and model_fields_set contains the field
        if self.baseline_spline is None and "baseline_spline" in self.model_fields_set:
            _dict['baseline_spline'] = None

        # set to None if baseline_values (nullable) is None
        # and model_fields_set contains the field
        if self.baseline_values is None and "baseline_values" in self.model_fields_set:
            _dict['baseline_values'] = None

        # set to None if integral_chosen_pairs (nullable) is None
        # and model_fields_set contains the field
        if self.integral_chosen_pairs is None and "integral_chosen_pairs" in self.model_fields_set:
            _dict['integral_chosen_pairs'] = None

        # set to None if integral_results (nullable) is None
        # and model_fields_set contains the field
        if self.integral_results is None and "integral_results" in self.model_fields_set:
            _dict['integral_results'] = None

        # set to None if raw_values (nullable) is None
        # and model_fields_set contains the field
        if self.raw_values is None and "raw_values" in self.model_fields_set:
            _dict['raw_values'] = None

        # set to None if time_values (nullable) is None
        # and model_fields_set contains the field
        if self.time_values is None and "time_values" in self.model_fields_set:
            _dict['time_values'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InstrumentExperimentChannel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baseline_chosen_points": OneOf.from_dict(obj["baseline_chosen_points"]) if obj.get("baseline_chosen_points") is not None else None,
            "baseline_spline": OneOf.from_dict(obj["baseline_spline"]) if obj.get("baseline_spline") is not None else None,
            "baseline_values": OneOf.from_dict(obj["baseline_values"]) if obj.get("baseline_values") is not None else None,
            "channel_name": obj.get("channel_name"),
            "experiment_id": obj.get("experiment_id"),
            "id": obj.get("id"),
            "integral_chosen_pairs": OneOf.from_dict(obj["integral_chosen_pairs"]) if obj.get("integral_chosen_pairs") is not None else None,
            "integral_results": OneOf.from_dict(obj["integral_results"]) if obj.get("integral_results") is not None else None,
            "raw_values": OneOf.from_dict(obj["raw_values"]) if obj.get("raw_values") is not None else None,
            "time_values": OneOf.from_dict(obj["time_values"]) if obj.get("time_values") is not None else None
        })
        return _obj


