# coding: utf-8

"""
    soil-api

    API for managing SOIL lab data

    The version of the OpenAPI document: 2.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sensormap_client.models.project import Project
from sensormap_client.models.soil_profile import SoilProfile
from typing import Optional, Set
from typing_extensions import Self

class Area(BaseModel):
    """
    Area
    """ # noqa: E501
    description: Optional[StrictStr] = None
    geom: Optional[Any] = None
    id: StrictStr
    last_updated: datetime
    name: Optional[StrictStr] = None
    plots: List[Plot]
    project: Optional[Project] = None
    project_id: StrictStr
    sensor_profiles: List[SensorProfile]
    soil_profiles: List[SoilProfile]
    transects: List[Transect]
    __properties: ClassVar[List[str]] = ["description", "geom", "id", "last_updated", "name", "plots", "project", "project_id", "sensor_profiles", "soil_profiles", "transects"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Area from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in plots (list)
        _items = []
        if self.plots:
            for _item_plots in self.plots:
                if _item_plots:
                    _items.append(_item_plots.to_dict())
            _dict['plots'] = _items
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sensor_profiles (list)
        _items = []
        if self.sensor_profiles:
            for _item_sensor_profiles in self.sensor_profiles:
                if _item_sensor_profiles:
                    _items.append(_item_sensor_profiles.to_dict())
            _dict['sensor_profiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in soil_profiles (list)
        _items = []
        if self.soil_profiles:
            for _item_soil_profiles in self.soil_profiles:
                if _item_soil_profiles:
                    _items.append(_item_soil_profiles.to_dict())
            _dict['soil_profiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transects (list)
        _items = []
        if self.transects:
            for _item_transects in self.transects:
                if _item_transects:
                    _items.append(_item_transects.to_dict())
            _dict['transects'] = _items
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if geom (nullable) is None
        # and model_fields_set contains the field
        if self.geom is None and "geom" in self.model_fields_set:
            _dict['geom'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if project (nullable) is None
        # and model_fields_set contains the field
        if self.project is None and "project" in self.model_fields_set:
            _dict['project'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Area from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "geom": obj.get("geom"),
            "id": obj.get("id"),
            "last_updated": obj.get("last_updated"),
            "name": obj.get("name"),
            "plots": [Plot.from_dict(_item) for _item in obj["plots"]] if obj.get("plots") is not None else None,
            "project": Project.from_dict(obj["project"]) if obj.get("project") is not None else None,
            "project_id": obj.get("project_id"),
            "sensor_profiles": [SensorProfile.from_dict(_item) for _item in obj["sensor_profiles"]] if obj.get("sensor_profiles") is not None else None,
            "soil_profiles": [SoilProfile.from_dict(_item) for _item in obj["soil_profiles"]] if obj.get("soil_profiles") is not None else None,
            "transects": [Transect.from_dict(_item) for _item in obj["transects"]] if obj.get("transects") is not None else None
        })
        return _obj

from sensormap_client.models.plot import Plot
from sensormap_client.models.sensor_profile import SensorProfile
from sensormap_client.models.transect import Transect
# TODO: Rewrite to not use raise_errors
Area.model_rebuild(raise_errors=False)

