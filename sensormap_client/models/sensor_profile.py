# coding: utf-8

"""
    soil-api

    API for managing SOIL lab data

    The version of the OpenAPI document: 2.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SensorProfile(BaseModel):
    """
    SensorProfile
    """ # noqa: E501
    area_id: StrictStr
    assignments: List[SensorProfileAssignment]
    coord_srid: Optional[StrictInt] = None
    coord_x: Optional[Union[StrictFloat, StrictInt]] = None
    coord_y: Optional[Union[StrictFloat, StrictInt]] = None
    coord_z: Optional[Union[StrictFloat, StrictInt]] = None
    description: Optional[StrictStr] = None
    id: StrictStr
    last_updated: datetime
    name: StrictStr
    __properties: ClassVar[List[str]] = ["area_id", "assignments", "coord_srid", "coord_x", "coord_y", "coord_z", "description", "id", "last_updated", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SensorProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assignments (list)
        _items = []
        if self.assignments:
            for _item_assignments in self.assignments:
                if _item_assignments:
                    _items.append(_item_assignments.to_dict())
            _dict['assignments'] = _items
        # set to None if coord_srid (nullable) is None
        # and model_fields_set contains the field
        if self.coord_srid is None and "coord_srid" in self.model_fields_set:
            _dict['coord_srid'] = None

        # set to None if coord_x (nullable) is None
        # and model_fields_set contains the field
        if self.coord_x is None and "coord_x" in self.model_fields_set:
            _dict['coord_x'] = None

        # set to None if coord_y (nullable) is None
        # and model_fields_set contains the field
        if self.coord_y is None and "coord_y" in self.model_fields_set:
            _dict['coord_y'] = None

        # set to None if coord_z (nullable) is None
        # and model_fields_set contains the field
        if self.coord_z is None and "coord_z" in self.model_fields_set:
            _dict['coord_z'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SensorProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "area_id": obj.get("area_id"),
            "assignments": [SensorProfileAssignment.from_dict(_item) for _item in obj["assignments"]] if obj.get("assignments") is not None else None,
            "coord_srid": obj.get("coord_srid"),
            "coord_x": obj.get("coord_x"),
            "coord_y": obj.get("coord_y"),
            "coord_z": obj.get("coord_z"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "last_updated": obj.get("last_updated"),
            "name": obj.get("name")
        })
        return _obj

from sensormap_client.models.sensor_profile_assignment import SensorProfileAssignment
# TODO: Rewrite to not use raise_errors
SensorProfile.model_rebuild(raise_errors=False)

